<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:local="clr-namespace:AJ_UpdateWatcher">

    <Style TargetType="ProgressBar">
        <Setter Property="Foreground" Value="#ff9800" />
        <Setter Property="Background" Value="Transparent"/>
        <!--<Setter Property="BorderBrush" Value="Transparent"/>-->
    </Style>


    <Style x:Key="CaptionButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid x:Name="LayoutRoot" Background="#ff9800" Width="44" Height="30">
                        <TextBlock x:Name="txt" Text="{TemplateBinding Content}" FontFamily="Segoe MDL2 Assets" FontSize="10" 
                                   Foreground="#000000" HorizontalAlignment="Center" VerticalAlignment="Center"
                                   RenderOptions.ClearTypeHint="Auto" TextOptions.TextRenderingMode="Aliased"  TextOptions.TextFormattingMode="Display"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="LayoutRoot" Property="Background" Value="#E5E5E5"/>
                            <Setter TargetName="txt" Property="Foreground" Value="#000000"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="CloseButtonStyle" TargetType="Button" BasedOn="{StaticResource CaptionButtonStyle}">
        <Setter Property="Content" Value="&#xE106;"/>
    </Style>
    
    <Style TargetType="Label">
        <Setter Property="Foreground" Value="White"/>
    </Style>

    <Style x:Key="TagLabelBorderStyle" TargetType="Border">
        <Setter Property="BorderBrush" Value="White" />
        <Setter Property="Background" Value="White" />
        <Setter Property="BorderThickness" Value="2" />
        <Setter Property="CornerRadius" Value="3" />
    </Style>


    <Style x:Key="TagLabelStyle" TargetType="Label">
        <Setter Property="Background" Value="White"/>
        <Setter Property="FontWeight" Value="Bold"/>
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Top"/>
        <Setter Property="Margin" Value="0,5,0,0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Label}">
                    <Border BorderBrush="{TemplateBinding BorderBrush}" 
            BorderThickness="{TemplateBinding BorderThickness}" 
            Background="{TemplateBinding Background}" 
            Padding="{TemplateBinding Padding}" 
            SnapsToDevicePixels="true" 
            CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" RecognizesAccessKey="True" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="TagLabelStyleWarning" TargetType="Label" BasedOn="{StaticResource TagLabelStyle}">
        <Setter Property="Background" Value="#ff0022"/>
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="FontWeight" Value="Bold"/>
    </Style>

    <Style x:Key="ThemedButton" TargetType="Button">
        <Setter Property="Foreground" Value="White" />
        <Setter Property="Background" Value="#1F2F4E" />
        <Setter Property="BorderBrush" Value="#182336"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Background" Value="#ff9800" />
                <Setter Property="Foreground" Value="Black" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="BigThemedButton" TargetType="Button">
        <Setter Property="Foreground" Value="Black" />
        <Setter Property="Background" Value="#ff9800" />
        <Setter Property="BorderBrush" Value="#182336"/>
        <Style.Triggers>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="Gray" />
            </Trigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="LinkButton" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <TextBlock TextDecorations="Underline" Margin="0,-10,0,0">
                            <ContentPresenter />
                    </TextBlock>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground" Value="#dadada" />
        <Style.Resources>
            <Style TargetType="Label">
                <Setter Property="Foreground" Value="#dadada" />
                <Style.Triggers>
                    <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=Button}, Path=IsMouseOver}" Value="True">
                        <Setter Property="Foreground" Value="#ff9800" />
                    </DataTrigger>
                </Style.Triggers>
            </Style>
        </Style.Resources>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#ff9800" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#777" />
            </Trigger>
        </Style.Triggers>
    </Style>

    
    <Style TargetType="CheckBox">
        <Setter Property="Foreground" Value="#dadada"/>
        <Style.Triggers>
            <Trigger Property="IsMouseOver" Value="true">
                <Setter Property="Foreground" Value="#ff9800" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
                <Setter Property="Foreground" Value="#555" />
            </Trigger>
        </Style.Triggers>
    </Style>
    
    <!--#region LargeCheckBox-->
    <SolidColorBrush x:Key="CheckBoxStroke" Color="#152935"/>
    <SolidColorBrush x:Key="CheckBoxMouseOverStroke" Color="#ff9800"/>
    <SolidColorBrush x:Key="CheckBoxDisabledStroke" Color="#555"/>
    <SolidColorBrush x:Key="CheckBoxDisabledForeground" Color="#939393"/>
    <SolidColorBrush x:Key="CheckBoxDisabledBackground" Color="#152935"/>
    <SolidColorBrush x:Key="CheckBoxFillNormal" Color="White"/>
    <Geometry x:Key="CheckBoxCheckmark">M7.2,5 L5.5,7.16 4.16,6.3 3.5,6.7 5.5,8.4 8.6,5.25 C8.6,5.25 8,4.7 7.22,5</Geometry>

    <Style x:Key="EmptyCheckBoxFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="1" 
									SnapsToDevicePixels="true" 
									Stroke="{StaticResource CheckBoxStroke}" 
									StrokeThickness="1" 
									StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="CheckRadioFocusVisual">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate>
                    <Rectangle Margin="14,0,0,0"
									SnapsToDevicePixels="true" 
									Stroke="{StaticResource CheckBoxStroke}" 
									StrokeThickness="1" 
									StrokeDashArray="1 2"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="LargeCheckBox" TargetType="{x:Type CheckBox}">
        <Setter Property="Foreground" Value="#dadada"></Setter>
        <Setter Property="Background" Value="{StaticResource CheckBoxFillNormal}"/>
        <Setter Property="BorderBrush" Value="{StaticResource CheckBoxStroke}"/>
        <Setter Property="FocusVisualStyle" Value="{StaticResource EmptyCheckBoxFocusVisual}"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type CheckBox}">
                    <BulletDecorator Background="Transparent" SnapsToDevicePixels="true">
                        <BulletDecorator.Bullet>
                            <Border x:Name="CheckBoxBorder"
                                        Height="22"
										Width="22"
										BorderThickness="1"
										Background="White">
                                <Path x:Name="CheckMark"  
                                            Data="{StaticResource CheckBoxCheckmark}" 
											Height="Auto" 
											Width="Auto" 
											Stretch="Fill" 
											Fill="{StaticResource CheckBoxStroke}"
											Margin="1,1.007,1,1"/>
                            </Border>
                        </BulletDecorator.Bullet>
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
												Margin="{TemplateBinding Padding}" 
												RecognizesAccessKey="True" 
												SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
												VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </BulletDecorator>
                    <ControlTemplate.Triggers>
                        <Trigger Property="HasContent" Value="true">
                            <Setter Property="FocusVisualStyle" Value="{StaticResource CheckRadioFocusVisual}"/>
                            <Setter Property="Padding" Value="4,0,0,0"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource CheckBoxDisabledForeground}"/>
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBoxDisabledStroke}"/>
                            <Setter Property="Background" TargetName="CheckBoxBorder" Value="{StaticResource CheckBoxDisabledBackground}"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="BorderBrush" TargetName="CheckBoxBorder" Value="{StaticResource CheckBoxMouseOverStroke}"/>
                        </Trigger>
                        <Trigger Property="IsChecked" Value="false">
                            <Setter TargetName="CheckMark" Property="Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <!--#endregion-->

</ResourceDictionary>